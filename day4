# Implement deletion operation from the end of the linked list and Insertion operation from the
beginning of the linked list

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linklist:
    def __init__(self):
        self.head=None
    def addbeg(self,newdata):
        newnode=Node(newdata)
        newnode.next=self.head
        self.head=newnode
    def delend(self):
        val=self.head
        self.head=val.next
        val = None
        return
    def display(self):
        val=self.head
        while val is not None:
            print(val.data)
            val = val.next
       
l=linklist()
l.addbeg(10)
l.addbeg(20)
l.addbeg(30)
l.delend()
l.display()

#Binary Search

l = [int(i) for i in input('Enter values: ').split()]
x = int(input('Enter the item to search: '))

def binary_search(arr, x): 
    low = 0
    high = len(l) - 1
    mid = 0
  
    while low <= high: 
  
        mid = (high + low) // 2
   
        if arr[mid] < x: 
            low = mid + 1
  
        elif arr[mid] > x: 
            high = mid - 1
  
        else: 
            return mid 
  
    return -1
 
result = binary_search(l, x)
if result != -1: 
    print("Element is present at index", str(result)) 
else: 
    print("Element is not present in array") 
    
    
    
#print middle value of linklist:
    
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        
class linklist:
    def __init__(self):
        self.head=None
        
    def addbeg(self,newdata):
        newnode=Node(newdata)
        newnode.next=self.head
        self.head=newnode
    
    def display(self):
        val=self.head
        while val is not None:
            print(val.data)
            val = val.next
    def printMiddle(self): 
        s = self.head 
        f = self.head 
  
        if self.head is not None: 
            while (f is not None and f.next is not None): 
                f = f.next.next
                s = s.next
            print("The middle element is: ", s.data)        
            
l=linklist()
l.addbeg(10)
l.addbeg(20)
l.addbeg(30)
l.printMiddle()
l.display()
